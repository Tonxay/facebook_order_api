// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Category             *category
	Chat                 *chat
	Customer             *customer
	District             *district
	Order                *order
	OrderDiscount        *orderDiscount
	OrderProduct         *orderProduct
	OrderProductDiscount *orderProductDiscount
	OrderProductsDetail  *orderProductsDetail
	OrderStockDetail     *orderStockDetail
	OrderTimeLine        *orderTimeLine
	Page                 *page
	Product              *product
	ProductDetail        *productDetail
	Promotion            *promotion
	Province             *province
	Shipping             *shipping
	Size                 *size
	StockProductDetail   *stockProductDetail
	User                 *user
	Village              *village
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Category = &Q.Category
	Chat = &Q.Chat
	Customer = &Q.Customer
	District = &Q.District
	Order = &Q.Order
	OrderDiscount = &Q.OrderDiscount
	OrderProduct = &Q.OrderProduct
	OrderProductDiscount = &Q.OrderProductDiscount
	OrderProductsDetail = &Q.OrderProductsDetail
	OrderStockDetail = &Q.OrderStockDetail
	OrderTimeLine = &Q.OrderTimeLine
	Page = &Q.Page
	Product = &Q.Product
	ProductDetail = &Q.ProductDetail
	Promotion = &Q.Promotion
	Province = &Q.Province
	Shipping = &Q.Shipping
	Size = &Q.Size
	StockProductDetail = &Q.StockProductDetail
	User = &Q.User
	Village = &Q.Village
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Category:             newCategory(db, opts...),
		Chat:                 newChat(db, opts...),
		Customer:             newCustomer(db, opts...),
		District:             newDistrict(db, opts...),
		Order:                newOrder(db, opts...),
		OrderDiscount:        newOrderDiscount(db, opts...),
		OrderProduct:         newOrderProduct(db, opts...),
		OrderProductDiscount: newOrderProductDiscount(db, opts...),
		OrderProductsDetail:  newOrderProductsDetail(db, opts...),
		OrderStockDetail:     newOrderStockDetail(db, opts...),
		OrderTimeLine:        newOrderTimeLine(db, opts...),
		Page:                 newPage(db, opts...),
		Product:              newProduct(db, opts...),
		ProductDetail:        newProductDetail(db, opts...),
		Promotion:            newPromotion(db, opts...),
		Province:             newProvince(db, opts...),
		Shipping:             newShipping(db, opts...),
		Size:                 newSize(db, opts...),
		StockProductDetail:   newStockProductDetail(db, opts...),
		User:                 newUser(db, opts...),
		Village:              newVillage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Category             category
	Chat                 chat
	Customer             customer
	District             district
	Order                order
	OrderDiscount        orderDiscount
	OrderProduct         orderProduct
	OrderProductDiscount orderProductDiscount
	OrderProductsDetail  orderProductsDetail
	OrderStockDetail     orderStockDetail
	OrderTimeLine        orderTimeLine
	Page                 page
	Product              product
	ProductDetail        productDetail
	Promotion            promotion
	Province             province
	Shipping             shipping
	Size                 size
	StockProductDetail   stockProductDetail
	User                 user
	Village              village
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Category:             q.Category.clone(db),
		Chat:                 q.Chat.clone(db),
		Customer:             q.Customer.clone(db),
		District:             q.District.clone(db),
		Order:                q.Order.clone(db),
		OrderDiscount:        q.OrderDiscount.clone(db),
		OrderProduct:         q.OrderProduct.clone(db),
		OrderProductDiscount: q.OrderProductDiscount.clone(db),
		OrderProductsDetail:  q.OrderProductsDetail.clone(db),
		OrderStockDetail:     q.OrderStockDetail.clone(db),
		OrderTimeLine:        q.OrderTimeLine.clone(db),
		Page:                 q.Page.clone(db),
		Product:              q.Product.clone(db),
		ProductDetail:        q.ProductDetail.clone(db),
		Promotion:            q.Promotion.clone(db),
		Province:             q.Province.clone(db),
		Shipping:             q.Shipping.clone(db),
		Size:                 q.Size.clone(db),
		StockProductDetail:   q.StockProductDetail.clone(db),
		User:                 q.User.clone(db),
		Village:              q.Village.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Category:             q.Category.replaceDB(db),
		Chat:                 q.Chat.replaceDB(db),
		Customer:             q.Customer.replaceDB(db),
		District:             q.District.replaceDB(db),
		Order:                q.Order.replaceDB(db),
		OrderDiscount:        q.OrderDiscount.replaceDB(db),
		OrderProduct:         q.OrderProduct.replaceDB(db),
		OrderProductDiscount: q.OrderProductDiscount.replaceDB(db),
		OrderProductsDetail:  q.OrderProductsDetail.replaceDB(db),
		OrderStockDetail:     q.OrderStockDetail.replaceDB(db),
		OrderTimeLine:        q.OrderTimeLine.replaceDB(db),
		Page:                 q.Page.replaceDB(db),
		Product:              q.Product.replaceDB(db),
		ProductDetail:        q.ProductDetail.replaceDB(db),
		Promotion:            q.Promotion.replaceDB(db),
		Province:             q.Province.replaceDB(db),
		Shipping:             q.Shipping.replaceDB(db),
		Size:                 q.Size.replaceDB(db),
		StockProductDetail:   q.StockProductDetail.replaceDB(db),
		User:                 q.User.replaceDB(db),
		Village:              q.Village.replaceDB(db),
	}
}

type queryCtx struct {
	Category             ICategoryDo
	Chat                 IChatDo
	Customer             ICustomerDo
	District             IDistrictDo
	Order                IOrderDo
	OrderDiscount        IOrderDiscountDo
	OrderProduct         IOrderProductDo
	OrderProductDiscount IOrderProductDiscountDo
	OrderProductsDetail  IOrderProductsDetailDo
	OrderStockDetail     IOrderStockDetailDo
	OrderTimeLine        IOrderTimeLineDo
	Page                 IPageDo
	Product              IProductDo
	ProductDetail        IProductDetailDo
	Promotion            IPromotionDo
	Province             IProvinceDo
	Shipping             IShippingDo
	Size                 ISizeDo
	StockProductDetail   IStockProductDetailDo
	User                 IUserDo
	Village              IVillageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category:             q.Category.WithContext(ctx),
		Chat:                 q.Chat.WithContext(ctx),
		Customer:             q.Customer.WithContext(ctx),
		District:             q.District.WithContext(ctx),
		Order:                q.Order.WithContext(ctx),
		OrderDiscount:        q.OrderDiscount.WithContext(ctx),
		OrderProduct:         q.OrderProduct.WithContext(ctx),
		OrderProductDiscount: q.OrderProductDiscount.WithContext(ctx),
		OrderProductsDetail:  q.OrderProductsDetail.WithContext(ctx),
		OrderStockDetail:     q.OrderStockDetail.WithContext(ctx),
		OrderTimeLine:        q.OrderTimeLine.WithContext(ctx),
		Page:                 q.Page.WithContext(ctx),
		Product:              q.Product.WithContext(ctx),
		ProductDetail:        q.ProductDetail.WithContext(ctx),
		Promotion:            q.Promotion.WithContext(ctx),
		Province:             q.Province.WithContext(ctx),
		Shipping:             q.Shipping.WithContext(ctx),
		Size:                 q.Size.WithContext(ctx),
		StockProductDetail:   q.StockProductDetail.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
		Village:              q.Village.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
