// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newOrderDiscount(db *gorm.DB, opts ...gen.DOOption) orderDiscount {
	_orderDiscount := orderDiscount{}

	_orderDiscount.orderDiscountDo.UseDB(db, opts...)
	_orderDiscount.orderDiscountDo.UseModel(&models.OrderDiscount{})

	tableName := _orderDiscount.orderDiscountDo.TableName()
	_orderDiscount.ALL = field.NewAsterisk(tableName)
	_orderDiscount.ID = field.NewString(tableName, "id")
	_orderDiscount.OrderID = field.NewString(tableName, "order_id")
	_orderDiscount.ProductID = field.NewString(tableName, "product_id")
	_orderDiscount.TotalDiscount = field.NewFloat64(tableName, "total_discount")
	_orderDiscount.DiscountID = field.NewString(tableName, "discount_id")
	_orderDiscount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderDiscount.CreatedAt = field.NewTime(tableName, "created_at")

	_orderDiscount.fillFieldMap()

	return _orderDiscount
}

type orderDiscount struct {
	orderDiscountDo

	ALL           field.Asterisk
	ID            field.String
	OrderID       field.String
	ProductID     field.String
	TotalDiscount field.Float64
	DiscountID    field.String
	UpdatedAt     field.Time
	CreatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (o orderDiscount) Table(newTableName string) *orderDiscount {
	o.orderDiscountDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderDiscount) As(alias string) *orderDiscount {
	o.orderDiscountDo.DO = *(o.orderDiscountDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderDiscount) updateTableName(table string) *orderDiscount {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderID = field.NewString(table, "order_id")
	o.ProductID = field.NewString(table, "product_id")
	o.TotalDiscount = field.NewFloat64(table, "total_discount")
	o.DiscountID = field.NewString(table, "discount_id")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.CreatedAt = field.NewTime(table, "created_at")

	o.fillFieldMap()

	return o
}

func (o *orderDiscount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderDiscount) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["product_id"] = o.ProductID
	o.fieldMap["total_discount"] = o.TotalDiscount
	o.fieldMap["discount_id"] = o.DiscountID
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["created_at"] = o.CreatedAt
}

func (o orderDiscount) clone(db *gorm.DB) orderDiscount {
	o.orderDiscountDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderDiscount) replaceDB(db *gorm.DB) orderDiscount {
	o.orderDiscountDo.ReplaceDB(db)
	return o
}

type orderDiscountDo struct{ gen.DO }

type IOrderDiscountDo interface {
	gen.SubQuery
	Debug() IOrderDiscountDo
	WithContext(ctx context.Context) IOrderDiscountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderDiscountDo
	WriteDB() IOrderDiscountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderDiscountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderDiscountDo
	Not(conds ...gen.Condition) IOrderDiscountDo
	Or(conds ...gen.Condition) IOrderDiscountDo
	Select(conds ...field.Expr) IOrderDiscountDo
	Where(conds ...gen.Condition) IOrderDiscountDo
	Order(conds ...field.Expr) IOrderDiscountDo
	Distinct(cols ...field.Expr) IOrderDiscountDo
	Omit(cols ...field.Expr) IOrderDiscountDo
	Join(table schema.Tabler, on ...field.Expr) IOrderDiscountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDiscountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderDiscountDo
	Group(cols ...field.Expr) IOrderDiscountDo
	Having(conds ...gen.Condition) IOrderDiscountDo
	Limit(limit int) IOrderDiscountDo
	Offset(offset int) IOrderDiscountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDiscountDo
	Unscoped() IOrderDiscountDo
	Create(values ...*models.OrderDiscount) error
	CreateInBatches(values []*models.OrderDiscount, batchSize int) error
	Save(values ...*models.OrderDiscount) error
	First() (*models.OrderDiscount, error)
	Take() (*models.OrderDiscount, error)
	Last() (*models.OrderDiscount, error)
	Find() ([]*models.OrderDiscount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderDiscount, err error)
	FindInBatches(result *[]*models.OrderDiscount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderDiscount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderDiscountDo
	Assign(attrs ...field.AssignExpr) IOrderDiscountDo
	Joins(fields ...field.RelationField) IOrderDiscountDo
	Preload(fields ...field.RelationField) IOrderDiscountDo
	FirstOrInit() (*models.OrderDiscount, error)
	FirstOrCreate() (*models.OrderDiscount, error)
	FindByPage(offset int, limit int) (result []*models.OrderDiscount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderDiscountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderDiscountDo) Debug() IOrderDiscountDo {
	return o.withDO(o.DO.Debug())
}

func (o orderDiscountDo) WithContext(ctx context.Context) IOrderDiscountDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderDiscountDo) ReadDB() IOrderDiscountDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderDiscountDo) WriteDB() IOrderDiscountDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderDiscountDo) Session(config *gorm.Session) IOrderDiscountDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderDiscountDo) Clauses(conds ...clause.Expression) IOrderDiscountDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderDiscountDo) Returning(value interface{}, columns ...string) IOrderDiscountDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderDiscountDo) Not(conds ...gen.Condition) IOrderDiscountDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderDiscountDo) Or(conds ...gen.Condition) IOrderDiscountDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderDiscountDo) Select(conds ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderDiscountDo) Where(conds ...gen.Condition) IOrderDiscountDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderDiscountDo) Order(conds ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderDiscountDo) Distinct(cols ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderDiscountDo) Omit(cols ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderDiscountDo) Join(table schema.Tabler, on ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderDiscountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderDiscountDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderDiscountDo) Group(cols ...field.Expr) IOrderDiscountDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderDiscountDo) Having(conds ...gen.Condition) IOrderDiscountDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderDiscountDo) Limit(limit int) IOrderDiscountDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderDiscountDo) Offset(offset int) IOrderDiscountDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderDiscountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDiscountDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderDiscountDo) Unscoped() IOrderDiscountDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderDiscountDo) Create(values ...*models.OrderDiscount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderDiscountDo) CreateInBatches(values []*models.OrderDiscount, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderDiscountDo) Save(values ...*models.OrderDiscount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderDiscountDo) First() (*models.OrderDiscount, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderDiscount), nil
	}
}

func (o orderDiscountDo) Take() (*models.OrderDiscount, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderDiscount), nil
	}
}

func (o orderDiscountDo) Last() (*models.OrderDiscount, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderDiscount), nil
	}
}

func (o orderDiscountDo) Find() ([]*models.OrderDiscount, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderDiscount), err
}

func (o orderDiscountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderDiscount, err error) {
	buf := make([]*models.OrderDiscount, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderDiscountDo) FindInBatches(result *[]*models.OrderDiscount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderDiscountDo) Attrs(attrs ...field.AssignExpr) IOrderDiscountDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderDiscountDo) Assign(attrs ...field.AssignExpr) IOrderDiscountDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderDiscountDo) Joins(fields ...field.RelationField) IOrderDiscountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderDiscountDo) Preload(fields ...field.RelationField) IOrderDiscountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderDiscountDo) FirstOrInit() (*models.OrderDiscount, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderDiscount), nil
	}
}

func (o orderDiscountDo) FirstOrCreate() (*models.OrderDiscount, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderDiscount), nil
	}
}

func (o orderDiscountDo) FindByPage(offset int, limit int) (result []*models.OrderDiscount, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderDiscountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderDiscountDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderDiscountDo) Delete(models ...*models.OrderDiscount) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderDiscountDo) withDO(do gen.Dao) *orderDiscountDo {
	o.DO = *do.(*gen.DO)
	return o
}
