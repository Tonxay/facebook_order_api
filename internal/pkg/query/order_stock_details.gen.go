// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newOrderStockDetail(db *gorm.DB, opts ...gen.DOOption) orderStockDetail {
	_orderStockDetail := orderStockDetail{}

	_orderStockDetail.orderStockDetailDo.UseDB(db, opts...)
	_orderStockDetail.orderStockDetailDo.UseModel(&models.OrderStockDetail{})

	tableName := _orderStockDetail.orderStockDetailDo.TableName()
	_orderStockDetail.ALL = field.NewAsterisk(tableName)
	_orderStockDetail.ID = field.NewString(tableName, "id")
	_orderStockDetail.StockProductDetailID = field.NewString(tableName, "stock_product_detail_id")
	_orderStockDetail.OrderID = field.NewString(tableName, "order_id")
	_orderStockDetail.Quatity = field.NewInt32(tableName, "quatity")

	_orderStockDetail.fillFieldMap()

	return _orderStockDetail
}

type orderStockDetail struct {
	orderStockDetailDo

	ALL                  field.Asterisk
	ID                   field.String
	StockProductDetailID field.String
	OrderID              field.String
	Quatity              field.Int32

	fieldMap map[string]field.Expr
}

func (o orderStockDetail) Table(newTableName string) *orderStockDetail {
	o.orderStockDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderStockDetail) As(alias string) *orderStockDetail {
	o.orderStockDetailDo.DO = *(o.orderStockDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderStockDetail) updateTableName(table string) *orderStockDetail {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.StockProductDetailID = field.NewString(table, "stock_product_detail_id")
	o.OrderID = field.NewString(table, "order_id")
	o.Quatity = field.NewInt32(table, "quatity")

	o.fillFieldMap()

	return o
}

func (o *orderStockDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderStockDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["id"] = o.ID
	o.fieldMap["stock_product_detail_id"] = o.StockProductDetailID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["quatity"] = o.Quatity
}

func (o orderStockDetail) clone(db *gorm.DB) orderStockDetail {
	o.orderStockDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderStockDetail) replaceDB(db *gorm.DB) orderStockDetail {
	o.orderStockDetailDo.ReplaceDB(db)
	return o
}

type orderStockDetailDo struct{ gen.DO }

type IOrderStockDetailDo interface {
	gen.SubQuery
	Debug() IOrderStockDetailDo
	WithContext(ctx context.Context) IOrderStockDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderStockDetailDo
	WriteDB() IOrderStockDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderStockDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderStockDetailDo
	Not(conds ...gen.Condition) IOrderStockDetailDo
	Or(conds ...gen.Condition) IOrderStockDetailDo
	Select(conds ...field.Expr) IOrderStockDetailDo
	Where(conds ...gen.Condition) IOrderStockDetailDo
	Order(conds ...field.Expr) IOrderStockDetailDo
	Distinct(cols ...field.Expr) IOrderStockDetailDo
	Omit(cols ...field.Expr) IOrderStockDetailDo
	Join(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo
	Group(cols ...field.Expr) IOrderStockDetailDo
	Having(conds ...gen.Condition) IOrderStockDetailDo
	Limit(limit int) IOrderStockDetailDo
	Offset(offset int) IOrderStockDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStockDetailDo
	Unscoped() IOrderStockDetailDo
	Create(values ...*models.OrderStockDetail) error
	CreateInBatches(values []*models.OrderStockDetail, batchSize int) error
	Save(values ...*models.OrderStockDetail) error
	First() (*models.OrderStockDetail, error)
	Take() (*models.OrderStockDetail, error)
	Last() (*models.OrderStockDetail, error)
	Find() ([]*models.OrderStockDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderStockDetail, err error)
	FindInBatches(result *[]*models.OrderStockDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderStockDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderStockDetailDo
	Assign(attrs ...field.AssignExpr) IOrderStockDetailDo
	Joins(fields ...field.RelationField) IOrderStockDetailDo
	Preload(fields ...field.RelationField) IOrderStockDetailDo
	FirstOrInit() (*models.OrderStockDetail, error)
	FirstOrCreate() (*models.OrderStockDetail, error)
	FindByPage(offset int, limit int) (result []*models.OrderStockDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderStockDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderStockDetailDo) Debug() IOrderStockDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o orderStockDetailDo) WithContext(ctx context.Context) IOrderStockDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderStockDetailDo) ReadDB() IOrderStockDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderStockDetailDo) WriteDB() IOrderStockDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderStockDetailDo) Session(config *gorm.Session) IOrderStockDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderStockDetailDo) Clauses(conds ...clause.Expression) IOrderStockDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderStockDetailDo) Returning(value interface{}, columns ...string) IOrderStockDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderStockDetailDo) Not(conds ...gen.Condition) IOrderStockDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderStockDetailDo) Or(conds ...gen.Condition) IOrderStockDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderStockDetailDo) Select(conds ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderStockDetailDo) Where(conds ...gen.Condition) IOrderStockDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderStockDetailDo) Order(conds ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderStockDetailDo) Distinct(cols ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderStockDetailDo) Omit(cols ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderStockDetailDo) Join(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderStockDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderStockDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderStockDetailDo) Group(cols ...field.Expr) IOrderStockDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderStockDetailDo) Having(conds ...gen.Condition) IOrderStockDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderStockDetailDo) Limit(limit int) IOrderStockDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderStockDetailDo) Offset(offset int) IOrderStockDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderStockDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderStockDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderStockDetailDo) Unscoped() IOrderStockDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderStockDetailDo) Create(values ...*models.OrderStockDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderStockDetailDo) CreateInBatches(values []*models.OrderStockDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderStockDetailDo) Save(values ...*models.OrderStockDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderStockDetailDo) First() (*models.OrderStockDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStockDetail), nil
	}
}

func (o orderStockDetailDo) Take() (*models.OrderStockDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStockDetail), nil
	}
}

func (o orderStockDetailDo) Last() (*models.OrderStockDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStockDetail), nil
	}
}

func (o orderStockDetailDo) Find() ([]*models.OrderStockDetail, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderStockDetail), err
}

func (o orderStockDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderStockDetail, err error) {
	buf := make([]*models.OrderStockDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderStockDetailDo) FindInBatches(result *[]*models.OrderStockDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderStockDetailDo) Attrs(attrs ...field.AssignExpr) IOrderStockDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderStockDetailDo) Assign(attrs ...field.AssignExpr) IOrderStockDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderStockDetailDo) Joins(fields ...field.RelationField) IOrderStockDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderStockDetailDo) Preload(fields ...field.RelationField) IOrderStockDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderStockDetailDo) FirstOrInit() (*models.OrderStockDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStockDetail), nil
	}
}

func (o orderStockDetailDo) FirstOrCreate() (*models.OrderStockDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderStockDetail), nil
	}
}

func (o orderStockDetailDo) FindByPage(offset int, limit int) (result []*models.OrderStockDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderStockDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderStockDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderStockDetailDo) Delete(models ...*models.OrderStockDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderStockDetailDo) withDO(do gen.Dao) *orderStockDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
