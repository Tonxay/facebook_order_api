// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newSize(db *gorm.DB, opts ...gen.DOOption) size {
	_size := size{}

	_size.sizeDo.UseDB(db, opts...)
	_size.sizeDo.UseModel(&models.Size{})

	tableName := _size.sizeDo.TableName()
	_size.ALL = field.NewAsterisk(tableName)
	_size.ID = field.NewString(tableName, "id")
	_size.Size = field.NewString(tableName, "size")
	_size.ProductDetailID = field.NewString(tableName, "product_detail_id")
	_size.Price = field.NewFloat64(tableName, "price")

	_size.fillFieldMap()

	return _size
}

type size struct {
	sizeDo

	ALL             field.Asterisk
	ID              field.String
	Size            field.String
	ProductDetailID field.String
	Price           field.Float64

	fieldMap map[string]field.Expr
}

func (s size) Table(newTableName string) *size {
	s.sizeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s size) As(alias string) *size {
	s.sizeDo.DO = *(s.sizeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *size) updateTableName(table string) *size {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Size = field.NewString(table, "size")
	s.ProductDetailID = field.NewString(table, "product_detail_id")
	s.Price = field.NewFloat64(table, "price")

	s.fillFieldMap()

	return s
}

func (s *size) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *size) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["size"] = s.Size
	s.fieldMap["product_detail_id"] = s.ProductDetailID
	s.fieldMap["price"] = s.Price
}

func (s size) clone(db *gorm.DB) size {
	s.sizeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s size) replaceDB(db *gorm.DB) size {
	s.sizeDo.ReplaceDB(db)
	return s
}

type sizeDo struct{ gen.DO }

type ISizeDo interface {
	gen.SubQuery
	Debug() ISizeDo
	WithContext(ctx context.Context) ISizeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISizeDo
	WriteDB() ISizeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISizeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISizeDo
	Not(conds ...gen.Condition) ISizeDo
	Or(conds ...gen.Condition) ISizeDo
	Select(conds ...field.Expr) ISizeDo
	Where(conds ...gen.Condition) ISizeDo
	Order(conds ...field.Expr) ISizeDo
	Distinct(cols ...field.Expr) ISizeDo
	Omit(cols ...field.Expr) ISizeDo
	Join(table schema.Tabler, on ...field.Expr) ISizeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISizeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISizeDo
	Group(cols ...field.Expr) ISizeDo
	Having(conds ...gen.Condition) ISizeDo
	Limit(limit int) ISizeDo
	Offset(offset int) ISizeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISizeDo
	Unscoped() ISizeDo
	Create(values ...*models.Size) error
	CreateInBatches(values []*models.Size, batchSize int) error
	Save(values ...*models.Size) error
	First() (*models.Size, error)
	Take() (*models.Size, error)
	Last() (*models.Size, error)
	Find() ([]*models.Size, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Size, err error)
	FindInBatches(result *[]*models.Size, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Size) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISizeDo
	Assign(attrs ...field.AssignExpr) ISizeDo
	Joins(fields ...field.RelationField) ISizeDo
	Preload(fields ...field.RelationField) ISizeDo
	FirstOrInit() (*models.Size, error)
	FirstOrCreate() (*models.Size, error)
	FindByPage(offset int, limit int) (result []*models.Size, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISizeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sizeDo) Debug() ISizeDo {
	return s.withDO(s.DO.Debug())
}

func (s sizeDo) WithContext(ctx context.Context) ISizeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sizeDo) ReadDB() ISizeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sizeDo) WriteDB() ISizeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sizeDo) Session(config *gorm.Session) ISizeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sizeDo) Clauses(conds ...clause.Expression) ISizeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sizeDo) Returning(value interface{}, columns ...string) ISizeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sizeDo) Not(conds ...gen.Condition) ISizeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sizeDo) Or(conds ...gen.Condition) ISizeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sizeDo) Select(conds ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sizeDo) Where(conds ...gen.Condition) ISizeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sizeDo) Order(conds ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sizeDo) Distinct(cols ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sizeDo) Omit(cols ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sizeDo) Join(table schema.Tabler, on ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sizeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISizeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sizeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISizeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sizeDo) Group(cols ...field.Expr) ISizeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sizeDo) Having(conds ...gen.Condition) ISizeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sizeDo) Limit(limit int) ISizeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sizeDo) Offset(offset int) ISizeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sizeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISizeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sizeDo) Unscoped() ISizeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sizeDo) Create(values ...*models.Size) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sizeDo) CreateInBatches(values []*models.Size, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sizeDo) Save(values ...*models.Size) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sizeDo) First() (*models.Size, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Size), nil
	}
}

func (s sizeDo) Take() (*models.Size, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Size), nil
	}
}

func (s sizeDo) Last() (*models.Size, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Size), nil
	}
}

func (s sizeDo) Find() ([]*models.Size, error) {
	result, err := s.DO.Find()
	return result.([]*models.Size), err
}

func (s sizeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Size, err error) {
	buf := make([]*models.Size, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sizeDo) FindInBatches(result *[]*models.Size, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sizeDo) Attrs(attrs ...field.AssignExpr) ISizeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sizeDo) Assign(attrs ...field.AssignExpr) ISizeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sizeDo) Joins(fields ...field.RelationField) ISizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sizeDo) Preload(fields ...field.RelationField) ISizeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sizeDo) FirstOrInit() (*models.Size, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Size), nil
	}
}

func (s sizeDo) FirstOrCreate() (*models.Size, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Size), nil
	}
}

func (s sizeDo) FindByPage(offset int, limit int) (result []*models.Size, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sizeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sizeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sizeDo) Delete(models ...*models.Size) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sizeDo) withDO(do gen.Dao) *sizeDo {
	s.DO = *do.(*gen.DO)
	return s
}
