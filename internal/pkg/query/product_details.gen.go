// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newProductDetail(db *gorm.DB, opts ...gen.DOOption) productDetail {
	_productDetail := productDetail{}

	_productDetail.productDetailDo.UseDB(db, opts...)
	_productDetail.productDetailDo.UseModel(&models.ProductDetail{})

	tableName := _productDetail.productDetailDo.TableName()
	_productDetail.ALL = field.NewAsterisk(tableName)
	_productDetail.ID = field.NewString(tableName, "id")
	_productDetail.ProductID = field.NewString(tableName, "product_id")
	_productDetail.Color = field.NewString(tableName, "color")
	_productDetail.FitType = field.NewString(tableName, "fit_type")
	_productDetail.Material = field.NewString(tableName, "material")
	_productDetail.Status = field.NewString(tableName, "status")
	_productDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_productDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_productDetail.ImageURL = field.NewString(tableName, "image_url")
	_productDetail.ColorName = field.NewString(tableName, "color_name")

	_productDetail.fillFieldMap()

	return _productDetail
}

type productDetail struct {
	productDetailDo

	ALL       field.Asterisk
	ID        field.String
	ProductID field.String
	Color     field.String
	FitType   field.String
	Material  field.String
	Status    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	ImageURL  field.String
	ColorName field.String

	fieldMap map[string]field.Expr
}

func (p productDetail) Table(newTableName string) *productDetail {
	p.productDetailDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productDetail) As(alias string) *productDetail {
	p.productDetailDo.DO = *(p.productDetailDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productDetail) updateTableName(table string) *productDetail {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProductID = field.NewString(table, "product_id")
	p.Color = field.NewString(table, "color")
	p.FitType = field.NewString(table, "fit_type")
	p.Material = field.NewString(table, "material")
	p.Status = field.NewString(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.ImageURL = field.NewString(table, "image_url")
	p.ColorName = field.NewString(table, "color_name")

	p.fillFieldMap()

	return p
}

func (p *productDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productDetail) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["color"] = p.Color
	p.fieldMap["fit_type"] = p.FitType
	p.fieldMap["material"] = p.Material
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["image_url"] = p.ImageURL
	p.fieldMap["color_name"] = p.ColorName
}

func (p productDetail) clone(db *gorm.DB) productDetail {
	p.productDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productDetail) replaceDB(db *gorm.DB) productDetail {
	p.productDetailDo.ReplaceDB(db)
	return p
}

type productDetailDo struct{ gen.DO }

type IProductDetailDo interface {
	gen.SubQuery
	Debug() IProductDetailDo
	WithContext(ctx context.Context) IProductDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductDetailDo
	WriteDB() IProductDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductDetailDo
	Not(conds ...gen.Condition) IProductDetailDo
	Or(conds ...gen.Condition) IProductDetailDo
	Select(conds ...field.Expr) IProductDetailDo
	Where(conds ...gen.Condition) IProductDetailDo
	Order(conds ...field.Expr) IProductDetailDo
	Distinct(cols ...field.Expr) IProductDetailDo
	Omit(cols ...field.Expr) IProductDetailDo
	Join(table schema.Tabler, on ...field.Expr) IProductDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductDetailDo
	Group(cols ...field.Expr) IProductDetailDo
	Having(conds ...gen.Condition) IProductDetailDo
	Limit(limit int) IProductDetailDo
	Offset(offset int) IProductDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductDetailDo
	Unscoped() IProductDetailDo
	Create(values ...*models.ProductDetail) error
	CreateInBatches(values []*models.ProductDetail, batchSize int) error
	Save(values ...*models.ProductDetail) error
	First() (*models.ProductDetail, error)
	Take() (*models.ProductDetail, error)
	Last() (*models.ProductDetail, error)
	Find() ([]*models.ProductDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ProductDetail, err error)
	FindInBatches(result *[]*models.ProductDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.ProductDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductDetailDo
	Assign(attrs ...field.AssignExpr) IProductDetailDo
	Joins(fields ...field.RelationField) IProductDetailDo
	Preload(fields ...field.RelationField) IProductDetailDo
	FirstOrInit() (*models.ProductDetail, error)
	FirstOrCreate() (*models.ProductDetail, error)
	FindByPage(offset int, limit int) (result []*models.ProductDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productDetailDo) Debug() IProductDetailDo {
	return p.withDO(p.DO.Debug())
}

func (p productDetailDo) WithContext(ctx context.Context) IProductDetailDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productDetailDo) ReadDB() IProductDetailDo {
	return p.Clauses(dbresolver.Read)
}

func (p productDetailDo) WriteDB() IProductDetailDo {
	return p.Clauses(dbresolver.Write)
}

func (p productDetailDo) Session(config *gorm.Session) IProductDetailDo {
	return p.withDO(p.DO.Session(config))
}

func (p productDetailDo) Clauses(conds ...clause.Expression) IProductDetailDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productDetailDo) Returning(value interface{}, columns ...string) IProductDetailDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productDetailDo) Not(conds ...gen.Condition) IProductDetailDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productDetailDo) Or(conds ...gen.Condition) IProductDetailDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productDetailDo) Select(conds ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productDetailDo) Where(conds ...gen.Condition) IProductDetailDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productDetailDo) Order(conds ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productDetailDo) Distinct(cols ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productDetailDo) Omit(cols ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productDetailDo) Join(table schema.Tabler, on ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productDetailDo) Group(cols ...field.Expr) IProductDetailDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productDetailDo) Having(conds ...gen.Condition) IProductDetailDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productDetailDo) Limit(limit int) IProductDetailDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productDetailDo) Offset(offset int) IProductDetailDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductDetailDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productDetailDo) Unscoped() IProductDetailDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productDetailDo) Create(values ...*models.ProductDetail) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productDetailDo) CreateInBatches(values []*models.ProductDetail, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productDetailDo) Save(values ...*models.ProductDetail) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productDetailDo) First() (*models.ProductDetail, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProductDetail), nil
	}
}

func (p productDetailDo) Take() (*models.ProductDetail, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProductDetail), nil
	}
}

func (p productDetailDo) Last() (*models.ProductDetail, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProductDetail), nil
	}
}

func (p productDetailDo) Find() ([]*models.ProductDetail, error) {
	result, err := p.DO.Find()
	return result.([]*models.ProductDetail), err
}

func (p productDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.ProductDetail, err error) {
	buf := make([]*models.ProductDetail, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productDetailDo) FindInBatches(result *[]*models.ProductDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productDetailDo) Attrs(attrs ...field.AssignExpr) IProductDetailDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productDetailDo) Assign(attrs ...field.AssignExpr) IProductDetailDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productDetailDo) Joins(fields ...field.RelationField) IProductDetailDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productDetailDo) Preload(fields ...field.RelationField) IProductDetailDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productDetailDo) FirstOrInit() (*models.ProductDetail, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProductDetail), nil
	}
}

func (p productDetailDo) FirstOrCreate() (*models.ProductDetail, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.ProductDetail), nil
	}
}

func (p productDetailDo) FindByPage(offset int, limit int) (result []*models.ProductDetail, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productDetailDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productDetailDo) Delete(models ...*models.ProductDetail) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productDetailDo) withDO(do gen.Dao) *productDetailDo {
	p.DO = *do.(*gen.DO)
	return p
}
