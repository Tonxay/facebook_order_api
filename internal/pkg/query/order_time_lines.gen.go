// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newOrderTimeLine(db *gorm.DB, opts ...gen.DOOption) orderTimeLine {
	_orderTimeLine := orderTimeLine{}

	_orderTimeLine.orderTimeLineDo.UseDB(db, opts...)
	_orderTimeLine.orderTimeLineDo.UseModel(&models.OrderTimeLine{})

	tableName := _orderTimeLine.orderTimeLineDo.TableName()
	_orderTimeLine.ALL = field.NewAsterisk(tableName)
	_orderTimeLine.ID = field.NewString(tableName, "id")
	_orderTimeLine.OrderStatus = field.NewString(tableName, "order_status")
	_orderTimeLine.UserID = field.NewString(tableName, "user_id")
	_orderTimeLine.CreatedAt = field.NewTime(tableName, "created_at")
	_orderTimeLine.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderTimeLine.OrderID = field.NewString(tableName, "order_id")

	_orderTimeLine.fillFieldMap()

	return _orderTimeLine
}

type orderTimeLine struct {
	orderTimeLineDo

	ALL         field.Asterisk
	ID          field.String
	OrderStatus field.String
	UserID      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	OrderID     field.String

	fieldMap map[string]field.Expr
}

func (o orderTimeLine) Table(newTableName string) *orderTimeLine {
	o.orderTimeLineDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderTimeLine) As(alias string) *orderTimeLine {
	o.orderTimeLineDo.DO = *(o.orderTimeLineDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderTimeLine) updateTableName(table string) *orderTimeLine {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderStatus = field.NewString(table, "order_status")
	o.UserID = field.NewString(table, "user_id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.OrderID = field.NewString(table, "order_id")

	o.fillFieldMap()

	return o
}

func (o *orderTimeLine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderTimeLine) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_status"] = o.OrderStatus
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["order_id"] = o.OrderID
}

func (o orderTimeLine) clone(db *gorm.DB) orderTimeLine {
	o.orderTimeLineDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderTimeLine) replaceDB(db *gorm.DB) orderTimeLine {
	o.orderTimeLineDo.ReplaceDB(db)
	return o
}

type orderTimeLineDo struct{ gen.DO }

type IOrderTimeLineDo interface {
	gen.SubQuery
	Debug() IOrderTimeLineDo
	WithContext(ctx context.Context) IOrderTimeLineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderTimeLineDo
	WriteDB() IOrderTimeLineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderTimeLineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderTimeLineDo
	Not(conds ...gen.Condition) IOrderTimeLineDo
	Or(conds ...gen.Condition) IOrderTimeLineDo
	Select(conds ...field.Expr) IOrderTimeLineDo
	Where(conds ...gen.Condition) IOrderTimeLineDo
	Order(conds ...field.Expr) IOrderTimeLineDo
	Distinct(cols ...field.Expr) IOrderTimeLineDo
	Omit(cols ...field.Expr) IOrderTimeLineDo
	Join(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo
	Group(cols ...field.Expr) IOrderTimeLineDo
	Having(conds ...gen.Condition) IOrderTimeLineDo
	Limit(limit int) IOrderTimeLineDo
	Offset(offset int) IOrderTimeLineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderTimeLineDo
	Unscoped() IOrderTimeLineDo
	Create(values ...*models.OrderTimeLine) error
	CreateInBatches(values []*models.OrderTimeLine, batchSize int) error
	Save(values ...*models.OrderTimeLine) error
	First() (*models.OrderTimeLine, error)
	Take() (*models.OrderTimeLine, error)
	Last() (*models.OrderTimeLine, error)
	Find() ([]*models.OrderTimeLine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderTimeLine, err error)
	FindInBatches(result *[]*models.OrderTimeLine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderTimeLine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderTimeLineDo
	Assign(attrs ...field.AssignExpr) IOrderTimeLineDo
	Joins(fields ...field.RelationField) IOrderTimeLineDo
	Preload(fields ...field.RelationField) IOrderTimeLineDo
	FirstOrInit() (*models.OrderTimeLine, error)
	FirstOrCreate() (*models.OrderTimeLine, error)
	FindByPage(offset int, limit int) (result []*models.OrderTimeLine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderTimeLineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderTimeLineDo) Debug() IOrderTimeLineDo {
	return o.withDO(o.DO.Debug())
}

func (o orderTimeLineDo) WithContext(ctx context.Context) IOrderTimeLineDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderTimeLineDo) ReadDB() IOrderTimeLineDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderTimeLineDo) WriteDB() IOrderTimeLineDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderTimeLineDo) Session(config *gorm.Session) IOrderTimeLineDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderTimeLineDo) Clauses(conds ...clause.Expression) IOrderTimeLineDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderTimeLineDo) Returning(value interface{}, columns ...string) IOrderTimeLineDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderTimeLineDo) Not(conds ...gen.Condition) IOrderTimeLineDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderTimeLineDo) Or(conds ...gen.Condition) IOrderTimeLineDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderTimeLineDo) Select(conds ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderTimeLineDo) Where(conds ...gen.Condition) IOrderTimeLineDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderTimeLineDo) Order(conds ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderTimeLineDo) Distinct(cols ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderTimeLineDo) Omit(cols ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderTimeLineDo) Join(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderTimeLineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderTimeLineDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderTimeLineDo) Group(cols ...field.Expr) IOrderTimeLineDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderTimeLineDo) Having(conds ...gen.Condition) IOrderTimeLineDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderTimeLineDo) Limit(limit int) IOrderTimeLineDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderTimeLineDo) Offset(offset int) IOrderTimeLineDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderTimeLineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderTimeLineDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderTimeLineDo) Unscoped() IOrderTimeLineDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderTimeLineDo) Create(values ...*models.OrderTimeLine) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderTimeLineDo) CreateInBatches(values []*models.OrderTimeLine, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderTimeLineDo) Save(values ...*models.OrderTimeLine) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderTimeLineDo) First() (*models.OrderTimeLine, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderTimeLine), nil
	}
}

func (o orderTimeLineDo) Take() (*models.OrderTimeLine, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderTimeLine), nil
	}
}

func (o orderTimeLineDo) Last() (*models.OrderTimeLine, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderTimeLine), nil
	}
}

func (o orderTimeLineDo) Find() ([]*models.OrderTimeLine, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderTimeLine), err
}

func (o orderTimeLineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderTimeLine, err error) {
	buf := make([]*models.OrderTimeLine, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderTimeLineDo) FindInBatches(result *[]*models.OrderTimeLine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderTimeLineDo) Attrs(attrs ...field.AssignExpr) IOrderTimeLineDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderTimeLineDo) Assign(attrs ...field.AssignExpr) IOrderTimeLineDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderTimeLineDo) Joins(fields ...field.RelationField) IOrderTimeLineDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderTimeLineDo) Preload(fields ...field.RelationField) IOrderTimeLineDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderTimeLineDo) FirstOrInit() (*models.OrderTimeLine, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderTimeLine), nil
	}
}

func (o orderTimeLineDo) FirstOrCreate() (*models.OrderTimeLine, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderTimeLine), nil
	}
}

func (o orderTimeLineDo) FindByPage(offset int, limit int) (result []*models.OrderTimeLine, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderTimeLineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderTimeLineDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderTimeLineDo) Delete(models ...*models.OrderTimeLine) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderTimeLineDo) withDO(do gen.Dao) *orderTimeLineDo {
	o.DO = *do.(*gen.DO)
	return o
}
