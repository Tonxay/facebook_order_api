// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newStockProductDetail(db *gorm.DB, opts ...gen.DOOption) stockProductDetail {
	_stockProductDetail := stockProductDetail{}

	_stockProductDetail.stockProductDetailDo.UseDB(db, opts...)
	_stockProductDetail.stockProductDetailDo.UseModel(&models.StockProductDetail{})

	tableName := _stockProductDetail.stockProductDetailDo.TableName()
	_stockProductDetail.ALL = field.NewAsterisk(tableName)
	_stockProductDetail.ID = field.NewString(tableName, "id")
	_stockProductDetail.ProductDetailID = field.NewString(tableName, "product_detail_id")
	_stockProductDetail.Quantity = field.NewInt32(tableName, "quantity")
	_stockProductDetail.Status = field.NewString(tableName, "status")
	_stockProductDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_stockProductDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stockProductDetail.UserID = field.NewString(tableName, "user_id")
	_stockProductDetail.Remaining = field.NewInt32(tableName, "remaining")
	_stockProductDetail.SizeID = field.NewString(tableName, "size_id")

	_stockProductDetail.fillFieldMap()

	return _stockProductDetail
}

type stockProductDetail struct {
	stockProductDetailDo

	ALL             field.Asterisk
	ID              field.String
	ProductDetailID field.String
	Quantity        field.Int32
	Status          field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	UserID          field.String
	Remaining       field.Int32
	SizeID          field.String

	fieldMap map[string]field.Expr
}

func (s stockProductDetail) Table(newTableName string) *stockProductDetail {
	s.stockProductDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockProductDetail) As(alias string) *stockProductDetail {
	s.stockProductDetailDo.DO = *(s.stockProductDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockProductDetail) updateTableName(table string) *stockProductDetail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.ProductDetailID = field.NewString(table, "product_detail_id")
	s.Quantity = field.NewInt32(table, "quantity")
	s.Status = field.NewString(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.UserID = field.NewString(table, "user_id")
	s.Remaining = field.NewInt32(table, "remaining")
	s.SizeID = field.NewString(table, "size_id")

	s.fillFieldMap()

	return s
}

func (s *stockProductDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockProductDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["product_detail_id"] = s.ProductDetailID
	s.fieldMap["quantity"] = s.Quantity
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["remaining"] = s.Remaining
	s.fieldMap["size_id"] = s.SizeID
}

func (s stockProductDetail) clone(db *gorm.DB) stockProductDetail {
	s.stockProductDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockProductDetail) replaceDB(db *gorm.DB) stockProductDetail {
	s.stockProductDetailDo.ReplaceDB(db)
	return s
}

type stockProductDetailDo struct{ gen.DO }

type IStockProductDetailDo interface {
	gen.SubQuery
	Debug() IStockProductDetailDo
	WithContext(ctx context.Context) IStockProductDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockProductDetailDo
	WriteDB() IStockProductDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockProductDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockProductDetailDo
	Not(conds ...gen.Condition) IStockProductDetailDo
	Or(conds ...gen.Condition) IStockProductDetailDo
	Select(conds ...field.Expr) IStockProductDetailDo
	Where(conds ...gen.Condition) IStockProductDetailDo
	Order(conds ...field.Expr) IStockProductDetailDo
	Distinct(cols ...field.Expr) IStockProductDetailDo
	Omit(cols ...field.Expr) IStockProductDetailDo
	Join(table schema.Tabler, on ...field.Expr) IStockProductDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockProductDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockProductDetailDo
	Group(cols ...field.Expr) IStockProductDetailDo
	Having(conds ...gen.Condition) IStockProductDetailDo
	Limit(limit int) IStockProductDetailDo
	Offset(offset int) IStockProductDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockProductDetailDo
	Unscoped() IStockProductDetailDo
	Create(values ...*models.StockProductDetail) error
	CreateInBatches(values []*models.StockProductDetail, batchSize int) error
	Save(values ...*models.StockProductDetail) error
	First() (*models.StockProductDetail, error)
	Take() (*models.StockProductDetail, error)
	Last() (*models.StockProductDetail, error)
	Find() ([]*models.StockProductDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.StockProductDetail, err error)
	FindInBatches(result *[]*models.StockProductDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.StockProductDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockProductDetailDo
	Assign(attrs ...field.AssignExpr) IStockProductDetailDo
	Joins(fields ...field.RelationField) IStockProductDetailDo
	Preload(fields ...field.RelationField) IStockProductDetailDo
	FirstOrInit() (*models.StockProductDetail, error)
	FirstOrCreate() (*models.StockProductDetail, error)
	FindByPage(offset int, limit int) (result []*models.StockProductDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockProductDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockProductDetailDo) Debug() IStockProductDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s stockProductDetailDo) WithContext(ctx context.Context) IStockProductDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockProductDetailDo) ReadDB() IStockProductDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockProductDetailDo) WriteDB() IStockProductDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockProductDetailDo) Session(config *gorm.Session) IStockProductDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockProductDetailDo) Clauses(conds ...clause.Expression) IStockProductDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockProductDetailDo) Returning(value interface{}, columns ...string) IStockProductDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockProductDetailDo) Not(conds ...gen.Condition) IStockProductDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockProductDetailDo) Or(conds ...gen.Condition) IStockProductDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockProductDetailDo) Select(conds ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockProductDetailDo) Where(conds ...gen.Condition) IStockProductDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockProductDetailDo) Order(conds ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockProductDetailDo) Distinct(cols ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockProductDetailDo) Omit(cols ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockProductDetailDo) Join(table schema.Tabler, on ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockProductDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockProductDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockProductDetailDo) Group(cols ...field.Expr) IStockProductDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockProductDetailDo) Having(conds ...gen.Condition) IStockProductDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockProductDetailDo) Limit(limit int) IStockProductDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockProductDetailDo) Offset(offset int) IStockProductDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockProductDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockProductDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockProductDetailDo) Unscoped() IStockProductDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockProductDetailDo) Create(values ...*models.StockProductDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockProductDetailDo) CreateInBatches(values []*models.StockProductDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockProductDetailDo) Save(values ...*models.StockProductDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockProductDetailDo) First() (*models.StockProductDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockProductDetail), nil
	}
}

func (s stockProductDetailDo) Take() (*models.StockProductDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockProductDetail), nil
	}
}

func (s stockProductDetailDo) Last() (*models.StockProductDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockProductDetail), nil
	}
}

func (s stockProductDetailDo) Find() ([]*models.StockProductDetail, error) {
	result, err := s.DO.Find()
	return result.([]*models.StockProductDetail), err
}

func (s stockProductDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.StockProductDetail, err error) {
	buf := make([]*models.StockProductDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockProductDetailDo) FindInBatches(result *[]*models.StockProductDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockProductDetailDo) Attrs(attrs ...field.AssignExpr) IStockProductDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockProductDetailDo) Assign(attrs ...field.AssignExpr) IStockProductDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockProductDetailDo) Joins(fields ...field.RelationField) IStockProductDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockProductDetailDo) Preload(fields ...field.RelationField) IStockProductDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockProductDetailDo) FirstOrInit() (*models.StockProductDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockProductDetail), nil
	}
}

func (s stockProductDetailDo) FirstOrCreate() (*models.StockProductDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockProductDetail), nil
	}
}

func (s stockProductDetailDo) FindByPage(offset int, limit int) (result []*models.StockProductDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockProductDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockProductDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockProductDetailDo) Delete(models ...*models.StockProductDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockProductDetailDo) withDO(do gen.Dao) *stockProductDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
