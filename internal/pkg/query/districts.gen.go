// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newDistrict(db *gorm.DB, opts ...gen.DOOption) district {
	_district := district{}

	_district.districtDo.UseDB(db, opts...)
	_district.districtDo.UseModel(&models.District{})

	tableName := _district.districtDo.TableName()
	_district.ALL = field.NewAsterisk(tableName)
	_district.ID = field.NewInt32(tableName, "id")
	_district.ProvinceID = field.NewInt32(tableName, "province_id")
	_district.DrName = field.NewString(tableName, "dr_name")
	_district.DrNameEn = field.NewString(tableName, "dr_name_en")

	_district.fillFieldMap()

	return _district
}

type district struct {
	districtDo

	ALL        field.Asterisk
	ID         field.Int32
	ProvinceID field.Int32
	DrName     field.String
	DrNameEn   field.String

	fieldMap map[string]field.Expr
}

func (d district) Table(newTableName string) *district {
	d.districtDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d district) As(alias string) *district {
	d.districtDo.DO = *(d.districtDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *district) updateTableName(table string) *district {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.ProvinceID = field.NewInt32(table, "province_id")
	d.DrName = field.NewString(table, "dr_name")
	d.DrNameEn = field.NewString(table, "dr_name_en")

	d.fillFieldMap()

	return d
}

func (d *district) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *district) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["province_id"] = d.ProvinceID
	d.fieldMap["dr_name"] = d.DrName
	d.fieldMap["dr_name_en"] = d.DrNameEn
}

func (d district) clone(db *gorm.DB) district {
	d.districtDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d district) replaceDB(db *gorm.DB) district {
	d.districtDo.ReplaceDB(db)
	return d
}

type districtDo struct{ gen.DO }

type IDistrictDo interface {
	gen.SubQuery
	Debug() IDistrictDo
	WithContext(ctx context.Context) IDistrictDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDistrictDo
	WriteDB() IDistrictDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDistrictDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDistrictDo
	Not(conds ...gen.Condition) IDistrictDo
	Or(conds ...gen.Condition) IDistrictDo
	Select(conds ...field.Expr) IDistrictDo
	Where(conds ...gen.Condition) IDistrictDo
	Order(conds ...field.Expr) IDistrictDo
	Distinct(cols ...field.Expr) IDistrictDo
	Omit(cols ...field.Expr) IDistrictDo
	Join(table schema.Tabler, on ...field.Expr) IDistrictDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDistrictDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDistrictDo
	Group(cols ...field.Expr) IDistrictDo
	Having(conds ...gen.Condition) IDistrictDo
	Limit(limit int) IDistrictDo
	Offset(offset int) IDistrictDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDistrictDo
	Unscoped() IDistrictDo
	Create(values ...*models.District) error
	CreateInBatches(values []*models.District, batchSize int) error
	Save(values ...*models.District) error
	First() (*models.District, error)
	Take() (*models.District, error)
	Last() (*models.District, error)
	Find() ([]*models.District, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.District, err error)
	FindInBatches(result *[]*models.District, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.District) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDistrictDo
	Assign(attrs ...field.AssignExpr) IDistrictDo
	Joins(fields ...field.RelationField) IDistrictDo
	Preload(fields ...field.RelationField) IDistrictDo
	FirstOrInit() (*models.District, error)
	FirstOrCreate() (*models.District, error)
	FindByPage(offset int, limit int) (result []*models.District, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDistrictDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d districtDo) Debug() IDistrictDo {
	return d.withDO(d.DO.Debug())
}

func (d districtDo) WithContext(ctx context.Context) IDistrictDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d districtDo) ReadDB() IDistrictDo {
	return d.Clauses(dbresolver.Read)
}

func (d districtDo) WriteDB() IDistrictDo {
	return d.Clauses(dbresolver.Write)
}

func (d districtDo) Session(config *gorm.Session) IDistrictDo {
	return d.withDO(d.DO.Session(config))
}

func (d districtDo) Clauses(conds ...clause.Expression) IDistrictDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d districtDo) Returning(value interface{}, columns ...string) IDistrictDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d districtDo) Not(conds ...gen.Condition) IDistrictDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d districtDo) Or(conds ...gen.Condition) IDistrictDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d districtDo) Select(conds ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d districtDo) Where(conds ...gen.Condition) IDistrictDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d districtDo) Order(conds ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d districtDo) Distinct(cols ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d districtDo) Omit(cols ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d districtDo) Join(table schema.Tabler, on ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d districtDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d districtDo) RightJoin(table schema.Tabler, on ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d districtDo) Group(cols ...field.Expr) IDistrictDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d districtDo) Having(conds ...gen.Condition) IDistrictDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d districtDo) Limit(limit int) IDistrictDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d districtDo) Offset(offset int) IDistrictDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d districtDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDistrictDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d districtDo) Unscoped() IDistrictDo {
	return d.withDO(d.DO.Unscoped())
}

func (d districtDo) Create(values ...*models.District) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d districtDo) CreateInBatches(values []*models.District, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d districtDo) Save(values ...*models.District) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d districtDo) First() (*models.District, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.District), nil
	}
}

func (d districtDo) Take() (*models.District, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.District), nil
	}
}

func (d districtDo) Last() (*models.District, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.District), nil
	}
}

func (d districtDo) Find() ([]*models.District, error) {
	result, err := d.DO.Find()
	return result.([]*models.District), err
}

func (d districtDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.District, err error) {
	buf := make([]*models.District, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d districtDo) FindInBatches(result *[]*models.District, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d districtDo) Attrs(attrs ...field.AssignExpr) IDistrictDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d districtDo) Assign(attrs ...field.AssignExpr) IDistrictDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d districtDo) Joins(fields ...field.RelationField) IDistrictDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d districtDo) Preload(fields ...field.RelationField) IDistrictDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d districtDo) FirstOrInit() (*models.District, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.District), nil
	}
}

func (d districtDo) FirstOrCreate() (*models.District, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.District), nil
	}
}

func (d districtDo) FindByPage(offset int, limit int) (result []*models.District, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d districtDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d districtDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d districtDo) Delete(models ...*models.District) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *districtDo) withDO(do gen.Dao) *districtDo {
	d.DO = *do.(*gen.DO)
	return d
}
