// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newPromotion(db *gorm.DB, opts ...gen.DOOption) promotion {
	_promotion := promotion{}

	_promotion.promotionDo.UseDB(db, opts...)
	_promotion.promotionDo.UseModel(&models.Promotion{})

	tableName := _promotion.promotionDo.TableName()
	_promotion.ALL = field.NewAsterisk(tableName)
	_promotion.ID = field.NewString(tableName, "id")
	_promotion.ProductID = field.NewString(tableName, "product_id")
	_promotion.Discount = field.NewFloat32(tableName, "discount")
	_promotion.Status = field.NewString(tableName, "status")
	_promotion.Quentity = field.NewInt32(tableName, "quentity")

	_promotion.fillFieldMap()

	return _promotion
}

type promotion struct {
	promotionDo

	ALL       field.Asterisk
	ID        field.String
	ProductID field.String
	Discount  field.Float32
	Status    field.String
	Quentity  field.Int32

	fieldMap map[string]field.Expr
}

func (p promotion) Table(newTableName string) *promotion {
	p.promotionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotion) As(alias string) *promotion {
	p.promotionDo.DO = *(p.promotionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotion) updateTableName(table string) *promotion {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProductID = field.NewString(table, "product_id")
	p.Discount = field.NewFloat32(table, "discount")
	p.Status = field.NewString(table, "status")
	p.Quentity = field.NewInt32(table, "quentity")

	p.fillFieldMap()

	return p
}

func (p *promotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["discount"] = p.Discount
	p.fieldMap["status"] = p.Status
	p.fieldMap["quentity"] = p.Quentity
}

func (p promotion) clone(db *gorm.DB) promotion {
	p.promotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotion) replaceDB(db *gorm.DB) promotion {
	p.promotionDo.ReplaceDB(db)
	return p
}

type promotionDo struct{ gen.DO }

type IPromotionDo interface {
	gen.SubQuery
	Debug() IPromotionDo
	WithContext(ctx context.Context) IPromotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionDo
	WriteDB() IPromotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionDo
	Not(conds ...gen.Condition) IPromotionDo
	Or(conds ...gen.Condition) IPromotionDo
	Select(conds ...field.Expr) IPromotionDo
	Where(conds ...gen.Condition) IPromotionDo
	Order(conds ...field.Expr) IPromotionDo
	Distinct(cols ...field.Expr) IPromotionDo
	Omit(cols ...field.Expr) IPromotionDo
	Join(table schema.Tabler, on ...field.Expr) IPromotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	Group(cols ...field.Expr) IPromotionDo
	Having(conds ...gen.Condition) IPromotionDo
	Limit(limit int) IPromotionDo
	Offset(offset int) IPromotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo
	Unscoped() IPromotionDo
	Create(values ...*models.Promotion) error
	CreateInBatches(values []*models.Promotion, batchSize int) error
	Save(values ...*models.Promotion) error
	First() (*models.Promotion, error)
	Take() (*models.Promotion, error)
	Last() (*models.Promotion, error)
	Find() ([]*models.Promotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Promotion, err error)
	FindInBatches(result *[]*models.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Promotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionDo
	Assign(attrs ...field.AssignExpr) IPromotionDo
	Joins(fields ...field.RelationField) IPromotionDo
	Preload(fields ...field.RelationField) IPromotionDo
	FirstOrInit() (*models.Promotion, error)
	FirstOrCreate() (*models.Promotion, error)
	FindByPage(offset int, limit int) (result []*models.Promotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionDo) Debug() IPromotionDo {
	return p.withDO(p.DO.Debug())
}

func (p promotionDo) WithContext(ctx context.Context) IPromotionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionDo) ReadDB() IPromotionDo {
	return p.Clauses(dbresolver.Read)
}

func (p promotionDo) WriteDB() IPromotionDo {
	return p.Clauses(dbresolver.Write)
}

func (p promotionDo) Session(config *gorm.Session) IPromotionDo {
	return p.withDO(p.DO.Session(config))
}

func (p promotionDo) Clauses(conds ...clause.Expression) IPromotionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionDo) Returning(value interface{}, columns ...string) IPromotionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionDo) Not(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionDo) Or(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionDo) Select(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionDo) Where(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionDo) Order(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionDo) Distinct(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionDo) Omit(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionDo) Join(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionDo) Group(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionDo) Having(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionDo) Limit(limit int) IPromotionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionDo) Offset(offset int) IPromotionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionDo) Unscoped() IPromotionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionDo) Create(values ...*models.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionDo) CreateInBatches(values []*models.Promotion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionDo) Save(values ...*models.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionDo) First() (*models.Promotion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Promotion), nil
	}
}

func (p promotionDo) Take() (*models.Promotion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Promotion), nil
	}
}

func (p promotionDo) Last() (*models.Promotion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Promotion), nil
	}
}

func (p promotionDo) Find() ([]*models.Promotion, error) {
	result, err := p.DO.Find()
	return result.([]*models.Promotion), err
}

func (p promotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Promotion, err error) {
	buf := make([]*models.Promotion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionDo) FindInBatches(result *[]*models.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionDo) Attrs(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionDo) Assign(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionDo) Joins(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionDo) Preload(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionDo) FirstOrInit() (*models.Promotion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Promotion), nil
	}
}

func (p promotionDo) FirstOrCreate() (*models.Promotion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Promotion), nil
	}
}

func (p promotionDo) FindByPage(offset int, limit int) (result []*models.Promotion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionDo) Delete(models ...*models.Promotion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionDo) withDO(do gen.Dao) *promotionDo {
	p.DO = *do.(*gen.DO)
	return p
}
