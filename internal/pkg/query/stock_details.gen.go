// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newStockDetail(db *gorm.DB, opts ...gen.DOOption) stockDetail {
	_stockDetail := stockDetail{}

	_stockDetail.stockDetailDo.UseDB(db, opts...)
	_stockDetail.stockDetailDo.UseModel(&models.StockDetail{})

	tableName := _stockDetail.stockDetailDo.TableName()
	_stockDetail.ALL = field.NewAsterisk(tableName)
	_stockDetail.ID = field.NewString(tableName, "id")
	_stockDetail.StockProductDetailID = field.NewString(tableName, "stock_product_detail_id")
	_stockDetail.OrderID = field.NewString(tableName, "order_id")

	_stockDetail.fillFieldMap()

	return _stockDetail
}

type stockDetail struct {
	stockDetailDo

	ALL                  field.Asterisk
	ID                   field.String
	StockProductDetailID field.String
	OrderID              field.String

	fieldMap map[string]field.Expr
}

func (s stockDetail) Table(newTableName string) *stockDetail {
	s.stockDetailDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockDetail) As(alias string) *stockDetail {
	s.stockDetailDo.DO = *(s.stockDetailDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockDetail) updateTableName(table string) *stockDetail {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.StockProductDetailID = field.NewString(table, "stock_product_detail_id")
	s.OrderID = field.NewString(table, "order_id")

	s.fillFieldMap()

	return s
}

func (s *stockDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockDetail) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["stock_product_detail_id"] = s.StockProductDetailID
	s.fieldMap["order_id"] = s.OrderID
}

func (s stockDetail) clone(db *gorm.DB) stockDetail {
	s.stockDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockDetail) replaceDB(db *gorm.DB) stockDetail {
	s.stockDetailDo.ReplaceDB(db)
	return s
}

type stockDetailDo struct{ gen.DO }

type IStockDetailDo interface {
	gen.SubQuery
	Debug() IStockDetailDo
	WithContext(ctx context.Context) IStockDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockDetailDo
	WriteDB() IStockDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockDetailDo
	Not(conds ...gen.Condition) IStockDetailDo
	Or(conds ...gen.Condition) IStockDetailDo
	Select(conds ...field.Expr) IStockDetailDo
	Where(conds ...gen.Condition) IStockDetailDo
	Order(conds ...field.Expr) IStockDetailDo
	Distinct(cols ...field.Expr) IStockDetailDo
	Omit(cols ...field.Expr) IStockDetailDo
	Join(table schema.Tabler, on ...field.Expr) IStockDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockDetailDo
	Group(cols ...field.Expr) IStockDetailDo
	Having(conds ...gen.Condition) IStockDetailDo
	Limit(limit int) IStockDetailDo
	Offset(offset int) IStockDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDetailDo
	Unscoped() IStockDetailDo
	Create(values ...*models.StockDetail) error
	CreateInBatches(values []*models.StockDetail, batchSize int) error
	Save(values ...*models.StockDetail) error
	First() (*models.StockDetail, error)
	Take() (*models.StockDetail, error)
	Last() (*models.StockDetail, error)
	Find() ([]*models.StockDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.StockDetail, err error)
	FindInBatches(result *[]*models.StockDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.StockDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockDetailDo
	Assign(attrs ...field.AssignExpr) IStockDetailDo
	Joins(fields ...field.RelationField) IStockDetailDo
	Preload(fields ...field.RelationField) IStockDetailDo
	FirstOrInit() (*models.StockDetail, error)
	FirstOrCreate() (*models.StockDetail, error)
	FindByPage(offset int, limit int) (result []*models.StockDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockDetailDo) Debug() IStockDetailDo {
	return s.withDO(s.DO.Debug())
}

func (s stockDetailDo) WithContext(ctx context.Context) IStockDetailDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockDetailDo) ReadDB() IStockDetailDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockDetailDo) WriteDB() IStockDetailDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockDetailDo) Session(config *gorm.Session) IStockDetailDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockDetailDo) Clauses(conds ...clause.Expression) IStockDetailDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockDetailDo) Returning(value interface{}, columns ...string) IStockDetailDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockDetailDo) Not(conds ...gen.Condition) IStockDetailDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockDetailDo) Or(conds ...gen.Condition) IStockDetailDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockDetailDo) Select(conds ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockDetailDo) Where(conds ...gen.Condition) IStockDetailDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockDetailDo) Order(conds ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockDetailDo) Distinct(cols ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockDetailDo) Omit(cols ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockDetailDo) Join(table schema.Tabler, on ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockDetailDo) Group(cols ...field.Expr) IStockDetailDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockDetailDo) Having(conds ...gen.Condition) IStockDetailDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockDetailDo) Limit(limit int) IStockDetailDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockDetailDo) Offset(offset int) IStockDetailDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDetailDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockDetailDo) Unscoped() IStockDetailDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockDetailDo) Create(values ...*models.StockDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockDetailDo) CreateInBatches(values []*models.StockDetail, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockDetailDo) Save(values ...*models.StockDetail) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockDetailDo) First() (*models.StockDetail, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockDetail), nil
	}
}

func (s stockDetailDo) Take() (*models.StockDetail, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockDetail), nil
	}
}

func (s stockDetailDo) Last() (*models.StockDetail, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockDetail), nil
	}
}

func (s stockDetailDo) Find() ([]*models.StockDetail, error) {
	result, err := s.DO.Find()
	return result.([]*models.StockDetail), err
}

func (s stockDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.StockDetail, err error) {
	buf := make([]*models.StockDetail, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockDetailDo) FindInBatches(result *[]*models.StockDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockDetailDo) Attrs(attrs ...field.AssignExpr) IStockDetailDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockDetailDo) Assign(attrs ...field.AssignExpr) IStockDetailDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockDetailDo) Joins(fields ...field.RelationField) IStockDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockDetailDo) Preload(fields ...field.RelationField) IStockDetailDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockDetailDo) FirstOrInit() (*models.StockDetail, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockDetail), nil
	}
}

func (s stockDetailDo) FirstOrCreate() (*models.StockDetail, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.StockDetail), nil
	}
}

func (s stockDetailDo) FindByPage(offset int, limit int) (result []*models.StockDetail, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockDetailDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockDetailDo) Delete(models ...*models.StockDetail) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockDetailDo) withDO(do gen.Dao) *stockDetailDo {
	s.DO = *do.(*gen.DO)
	return s
}
