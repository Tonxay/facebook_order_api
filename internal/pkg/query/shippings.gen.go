// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newShipping(db *gorm.DB, opts ...gen.DOOption) shipping {
	_shipping := shipping{}

	_shipping.shippingDo.UseDB(db, opts...)
	_shipping.shippingDo.UseModel(&models.Shipping{})

	tableName := _shipping.shippingDo.TableName()
	_shipping.ALL = field.NewAsterisk(tableName)
	_shipping.ID = field.NewString(tableName, "id")
	_shipping.Name = field.NewString(tableName, "name")
	_shipping.Status = field.NewString(tableName, "status")

	_shipping.fillFieldMap()

	return _shipping
}

type shipping struct {
	shippingDo

	ALL    field.Asterisk
	ID     field.String
	Name   field.String
	Status field.String

	fieldMap map[string]field.Expr
}

func (s shipping) Table(newTableName string) *shipping {
	s.shippingDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shipping) As(alias string) *shipping {
	s.shippingDo.DO = *(s.shippingDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shipping) updateTableName(table string) *shipping {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Status = field.NewString(table, "status")

	s.fillFieldMap()

	return s
}

func (s *shipping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shipping) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["status"] = s.Status
}

func (s shipping) clone(db *gorm.DB) shipping {
	s.shippingDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shipping) replaceDB(db *gorm.DB) shipping {
	s.shippingDo.ReplaceDB(db)
	return s
}

type shippingDo struct{ gen.DO }

type IShippingDo interface {
	gen.SubQuery
	Debug() IShippingDo
	WithContext(ctx context.Context) IShippingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShippingDo
	WriteDB() IShippingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShippingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShippingDo
	Not(conds ...gen.Condition) IShippingDo
	Or(conds ...gen.Condition) IShippingDo
	Select(conds ...field.Expr) IShippingDo
	Where(conds ...gen.Condition) IShippingDo
	Order(conds ...field.Expr) IShippingDo
	Distinct(cols ...field.Expr) IShippingDo
	Omit(cols ...field.Expr) IShippingDo
	Join(table schema.Tabler, on ...field.Expr) IShippingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShippingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShippingDo
	Group(cols ...field.Expr) IShippingDo
	Having(conds ...gen.Condition) IShippingDo
	Limit(limit int) IShippingDo
	Offset(offset int) IShippingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingDo
	Unscoped() IShippingDo
	Create(values ...*models.Shipping) error
	CreateInBatches(values []*models.Shipping, batchSize int) error
	Save(values ...*models.Shipping) error
	First() (*models.Shipping, error)
	Take() (*models.Shipping, error)
	Last() (*models.Shipping, error)
	Find() ([]*models.Shipping, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Shipping, err error)
	FindInBatches(result *[]*models.Shipping, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Shipping) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShippingDo
	Assign(attrs ...field.AssignExpr) IShippingDo
	Joins(fields ...field.RelationField) IShippingDo
	Preload(fields ...field.RelationField) IShippingDo
	FirstOrInit() (*models.Shipping, error)
	FirstOrCreate() (*models.Shipping, error)
	FindByPage(offset int, limit int) (result []*models.Shipping, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShippingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shippingDo) Debug() IShippingDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingDo) WithContext(ctx context.Context) IShippingDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingDo) ReadDB() IShippingDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingDo) WriteDB() IShippingDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingDo) Session(config *gorm.Session) IShippingDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingDo) Clauses(conds ...clause.Expression) IShippingDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingDo) Returning(value interface{}, columns ...string) IShippingDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingDo) Not(conds ...gen.Condition) IShippingDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingDo) Or(conds ...gen.Condition) IShippingDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingDo) Select(conds ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingDo) Where(conds ...gen.Condition) IShippingDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingDo) Order(conds ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingDo) Distinct(cols ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingDo) Omit(cols ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingDo) Join(table schema.Tabler, on ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShippingDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingDo) RightJoin(table schema.Tabler, on ...field.Expr) IShippingDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingDo) Group(cols ...field.Expr) IShippingDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingDo) Having(conds ...gen.Condition) IShippingDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingDo) Limit(limit int) IShippingDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingDo) Offset(offset int) IShippingDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingDo) Unscoped() IShippingDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingDo) Create(values ...*models.Shipping) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingDo) CreateInBatches(values []*models.Shipping, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingDo) Save(values ...*models.Shipping) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingDo) First() (*models.Shipping, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Shipping), nil
	}
}

func (s shippingDo) Take() (*models.Shipping, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Shipping), nil
	}
}

func (s shippingDo) Last() (*models.Shipping, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Shipping), nil
	}
}

func (s shippingDo) Find() ([]*models.Shipping, error) {
	result, err := s.DO.Find()
	return result.([]*models.Shipping), err
}

func (s shippingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Shipping, err error) {
	buf := make([]*models.Shipping, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingDo) FindInBatches(result *[]*models.Shipping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingDo) Attrs(attrs ...field.AssignExpr) IShippingDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingDo) Assign(attrs ...field.AssignExpr) IShippingDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingDo) Joins(fields ...field.RelationField) IShippingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingDo) Preload(fields ...field.RelationField) IShippingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingDo) FirstOrInit() (*models.Shipping, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Shipping), nil
	}
}

func (s shippingDo) FirstOrCreate() (*models.Shipping, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Shipping), nil
	}
}

func (s shippingDo) FindByPage(offset int, limit int) (result []*models.Shipping, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingDo) Delete(models ...*models.Shipping) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingDo) withDO(do gen.Dao) *shippingDo {
	s.DO = *do.(*gen.DO)
	return s
}
