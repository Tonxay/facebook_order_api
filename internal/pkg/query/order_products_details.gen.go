// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newOrderProductsDetail(db *gorm.DB, opts ...gen.DOOption) orderProductsDetail {
	_orderProductsDetail := orderProductsDetail{}

	_orderProductsDetail.orderProductsDetailDo.UseDB(db, opts...)
	_orderProductsDetail.orderProductsDetailDo.UseModel(&models.OrderProductsDetail{})

	tableName := _orderProductsDetail.orderProductsDetailDo.TableName()
	_orderProductsDetail.ALL = field.NewAsterisk(tableName)
	_orderProductsDetail.ID = field.NewString(tableName, "id")
	_orderProductsDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_orderProductsDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderProductsDetail.ProductDetailID = field.NewString(tableName, "product_detail_id")
	_orderProductsDetail.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_orderProductsDetail.TotalPrice = field.NewFloat64(tableName, "total_price")
	_orderProductsDetail.Quantity = field.NewInt32(tableName, "quantity")
	_orderProductsDetail.SizeID = field.NewString(tableName, "size_id")
	_orderProductsDetail.OrderProductID = field.NewString(tableName, "order_product_id")

	_orderProductsDetail.fillFieldMap()

	return _orderProductsDetail
}

type orderProductsDetail struct {
	orderProductsDetailDo

	ALL             field.Asterisk
	ID              field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	ProductDetailID field.String
	UnitPrice       field.Float64
	TotalPrice      field.Float64
	Quantity        field.Int32
	SizeID          field.String
	OrderProductID  field.String

	fieldMap map[string]field.Expr
}

func (o orderProductsDetail) Table(newTableName string) *orderProductsDetail {
	o.orderProductsDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderProductsDetail) As(alias string) *orderProductsDetail {
	o.orderProductsDetailDo.DO = *(o.orderProductsDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderProductsDetail) updateTableName(table string) *orderProductsDetail {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.ProductDetailID = field.NewString(table, "product_detail_id")
	o.UnitPrice = field.NewFloat64(table, "unit_price")
	o.TotalPrice = field.NewFloat64(table, "total_price")
	o.Quantity = field.NewInt32(table, "quantity")
	o.SizeID = field.NewString(table, "size_id")
	o.OrderProductID = field.NewString(table, "order_product_id")

	o.fillFieldMap()

	return o
}

func (o *orderProductsDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderProductsDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["product_detail_id"] = o.ProductDetailID
	o.fieldMap["unit_price"] = o.UnitPrice
	o.fieldMap["total_price"] = o.TotalPrice
	o.fieldMap["quantity"] = o.Quantity
	o.fieldMap["size_id"] = o.SizeID
	o.fieldMap["order_product_id"] = o.OrderProductID
}

func (o orderProductsDetail) clone(db *gorm.DB) orderProductsDetail {
	o.orderProductsDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderProductsDetail) replaceDB(db *gorm.DB) orderProductsDetail {
	o.orderProductsDetailDo.ReplaceDB(db)
	return o
}

type orderProductsDetailDo struct{ gen.DO }

type IOrderProductsDetailDo interface {
	gen.SubQuery
	Debug() IOrderProductsDetailDo
	WithContext(ctx context.Context) IOrderProductsDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderProductsDetailDo
	WriteDB() IOrderProductsDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderProductsDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderProductsDetailDo
	Not(conds ...gen.Condition) IOrderProductsDetailDo
	Or(conds ...gen.Condition) IOrderProductsDetailDo
	Select(conds ...field.Expr) IOrderProductsDetailDo
	Where(conds ...gen.Condition) IOrderProductsDetailDo
	Order(conds ...field.Expr) IOrderProductsDetailDo
	Distinct(cols ...field.Expr) IOrderProductsDetailDo
	Omit(cols ...field.Expr) IOrderProductsDetailDo
	Join(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo
	Group(cols ...field.Expr) IOrderProductsDetailDo
	Having(conds ...gen.Condition) IOrderProductsDetailDo
	Limit(limit int) IOrderProductsDetailDo
	Offset(offset int) IOrderProductsDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductsDetailDo
	Unscoped() IOrderProductsDetailDo
	Create(values ...*models.OrderProductsDetail) error
	CreateInBatches(values []*models.OrderProductsDetail, batchSize int) error
	Save(values ...*models.OrderProductsDetail) error
	First() (*models.OrderProductsDetail, error)
	Take() (*models.OrderProductsDetail, error)
	Last() (*models.OrderProductsDetail, error)
	Find() ([]*models.OrderProductsDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderProductsDetail, err error)
	FindInBatches(result *[]*models.OrderProductsDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderProductsDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderProductsDetailDo
	Assign(attrs ...field.AssignExpr) IOrderProductsDetailDo
	Joins(fields ...field.RelationField) IOrderProductsDetailDo
	Preload(fields ...field.RelationField) IOrderProductsDetailDo
	FirstOrInit() (*models.OrderProductsDetail, error)
	FirstOrCreate() (*models.OrderProductsDetail, error)
	FindByPage(offset int, limit int) (result []*models.OrderProductsDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderProductsDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderProductsDetailDo) Debug() IOrderProductsDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o orderProductsDetailDo) WithContext(ctx context.Context) IOrderProductsDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderProductsDetailDo) ReadDB() IOrderProductsDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderProductsDetailDo) WriteDB() IOrderProductsDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderProductsDetailDo) Session(config *gorm.Session) IOrderProductsDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderProductsDetailDo) Clauses(conds ...clause.Expression) IOrderProductsDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderProductsDetailDo) Returning(value interface{}, columns ...string) IOrderProductsDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderProductsDetailDo) Not(conds ...gen.Condition) IOrderProductsDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderProductsDetailDo) Or(conds ...gen.Condition) IOrderProductsDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderProductsDetailDo) Select(conds ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderProductsDetailDo) Where(conds ...gen.Condition) IOrderProductsDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderProductsDetailDo) Order(conds ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderProductsDetailDo) Distinct(cols ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderProductsDetailDo) Omit(cols ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderProductsDetailDo) Join(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderProductsDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderProductsDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderProductsDetailDo) Group(cols ...field.Expr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderProductsDetailDo) Having(conds ...gen.Condition) IOrderProductsDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderProductsDetailDo) Limit(limit int) IOrderProductsDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderProductsDetailDo) Offset(offset int) IOrderProductsDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderProductsDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductsDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderProductsDetailDo) Unscoped() IOrderProductsDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderProductsDetailDo) Create(values ...*models.OrderProductsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderProductsDetailDo) CreateInBatches(values []*models.OrderProductsDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderProductsDetailDo) Save(values ...*models.OrderProductsDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderProductsDetailDo) First() (*models.OrderProductsDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductsDetail), nil
	}
}

func (o orderProductsDetailDo) Take() (*models.OrderProductsDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductsDetail), nil
	}
}

func (o orderProductsDetailDo) Last() (*models.OrderProductsDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductsDetail), nil
	}
}

func (o orderProductsDetailDo) Find() ([]*models.OrderProductsDetail, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderProductsDetail), err
}

func (o orderProductsDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderProductsDetail, err error) {
	buf := make([]*models.OrderProductsDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderProductsDetailDo) FindInBatches(result *[]*models.OrderProductsDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderProductsDetailDo) Attrs(attrs ...field.AssignExpr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderProductsDetailDo) Assign(attrs ...field.AssignExpr) IOrderProductsDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderProductsDetailDo) Joins(fields ...field.RelationField) IOrderProductsDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderProductsDetailDo) Preload(fields ...field.RelationField) IOrderProductsDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderProductsDetailDo) FirstOrInit() (*models.OrderProductsDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductsDetail), nil
	}
}

func (o orderProductsDetailDo) FirstOrCreate() (*models.OrderProductsDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductsDetail), nil
	}
}

func (o orderProductsDetailDo) FindByPage(offset int, limit int) (result []*models.OrderProductsDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderProductsDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderProductsDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderProductsDetailDo) Delete(models ...*models.OrderProductsDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderProductsDetailDo) withDO(do gen.Dao) *orderProductsDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
