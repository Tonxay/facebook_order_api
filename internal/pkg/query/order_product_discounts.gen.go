// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newOrderProductDiscount(db *gorm.DB, opts ...gen.DOOption) orderProductDiscount {
	_orderProductDiscount := orderProductDiscount{}

	_orderProductDiscount.orderProductDiscountDo.UseDB(db, opts...)
	_orderProductDiscount.orderProductDiscountDo.UseModel(&models.OrderProductDiscount{})

	tableName := _orderProductDiscount.orderProductDiscountDo.TableName()
	_orderProductDiscount.ALL = field.NewAsterisk(tableName)
	_orderProductDiscount.ID = field.NewString(tableName, "id")
	_orderProductDiscount.OrderProductID = field.NewString(tableName, "order_product_id")
	_orderProductDiscount.PromotionPriceID = field.NewString(tableName, "promotion_price_id")
	_orderProductDiscount.Discount = field.NewFloat64(tableName, "discount")
	_orderProductDiscount.CreatedAt = field.NewTime(tableName, "created_at")
	_orderProductDiscount.UpdateAt = field.NewTime(tableName, "update_at")

	_orderProductDiscount.fillFieldMap()

	return _orderProductDiscount
}

type orderProductDiscount struct {
	orderProductDiscountDo

	ALL              field.Asterisk
	ID               field.String
	OrderProductID   field.String
	PromotionPriceID field.String
	Discount         field.Float64
	CreatedAt        field.Time
	UpdateAt         field.Time

	fieldMap map[string]field.Expr
}

func (o orderProductDiscount) Table(newTableName string) *orderProductDiscount {
	o.orderProductDiscountDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderProductDiscount) As(alias string) *orderProductDiscount {
	o.orderProductDiscountDo.DO = *(o.orderProductDiscountDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderProductDiscount) updateTableName(table string) *orderProductDiscount {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OrderProductID = field.NewString(table, "order_product_id")
	o.PromotionPriceID = field.NewString(table, "promotion_price_id")
	o.Discount = field.NewFloat64(table, "discount")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdateAt = field.NewTime(table, "update_at")

	o.fillFieldMap()

	return o
}

func (o *orderProductDiscount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderProductDiscount) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_product_id"] = o.OrderProductID
	o.fieldMap["promotion_price_id"] = o.PromotionPriceID
	o.fieldMap["discount"] = o.Discount
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["update_at"] = o.UpdateAt
}

func (o orderProductDiscount) clone(db *gorm.DB) orderProductDiscount {
	o.orderProductDiscountDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderProductDiscount) replaceDB(db *gorm.DB) orderProductDiscount {
	o.orderProductDiscountDo.ReplaceDB(db)
	return o
}

type orderProductDiscountDo struct{ gen.DO }

type IOrderProductDiscountDo interface {
	gen.SubQuery
	Debug() IOrderProductDiscountDo
	WithContext(ctx context.Context) IOrderProductDiscountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderProductDiscountDo
	WriteDB() IOrderProductDiscountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderProductDiscountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderProductDiscountDo
	Not(conds ...gen.Condition) IOrderProductDiscountDo
	Or(conds ...gen.Condition) IOrderProductDiscountDo
	Select(conds ...field.Expr) IOrderProductDiscountDo
	Where(conds ...gen.Condition) IOrderProductDiscountDo
	Order(conds ...field.Expr) IOrderProductDiscountDo
	Distinct(cols ...field.Expr) IOrderProductDiscountDo
	Omit(cols ...field.Expr) IOrderProductDiscountDo
	Join(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo
	Group(cols ...field.Expr) IOrderProductDiscountDo
	Having(conds ...gen.Condition) IOrderProductDiscountDo
	Limit(limit int) IOrderProductDiscountDo
	Offset(offset int) IOrderProductDiscountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductDiscountDo
	Unscoped() IOrderProductDiscountDo
	Create(values ...*models.OrderProductDiscount) error
	CreateInBatches(values []*models.OrderProductDiscount, batchSize int) error
	Save(values ...*models.OrderProductDiscount) error
	First() (*models.OrderProductDiscount, error)
	Take() (*models.OrderProductDiscount, error)
	Last() (*models.OrderProductDiscount, error)
	Find() ([]*models.OrderProductDiscount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderProductDiscount, err error)
	FindInBatches(result *[]*models.OrderProductDiscount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderProductDiscount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderProductDiscountDo
	Assign(attrs ...field.AssignExpr) IOrderProductDiscountDo
	Joins(fields ...field.RelationField) IOrderProductDiscountDo
	Preload(fields ...field.RelationField) IOrderProductDiscountDo
	FirstOrInit() (*models.OrderProductDiscount, error)
	FirstOrCreate() (*models.OrderProductDiscount, error)
	FindByPage(offset int, limit int) (result []*models.OrderProductDiscount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderProductDiscountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderProductDiscountDo) Debug() IOrderProductDiscountDo {
	return o.withDO(o.DO.Debug())
}

func (o orderProductDiscountDo) WithContext(ctx context.Context) IOrderProductDiscountDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderProductDiscountDo) ReadDB() IOrderProductDiscountDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderProductDiscountDo) WriteDB() IOrderProductDiscountDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderProductDiscountDo) Session(config *gorm.Session) IOrderProductDiscountDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderProductDiscountDo) Clauses(conds ...clause.Expression) IOrderProductDiscountDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderProductDiscountDo) Returning(value interface{}, columns ...string) IOrderProductDiscountDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderProductDiscountDo) Not(conds ...gen.Condition) IOrderProductDiscountDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderProductDiscountDo) Or(conds ...gen.Condition) IOrderProductDiscountDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderProductDiscountDo) Select(conds ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderProductDiscountDo) Where(conds ...gen.Condition) IOrderProductDiscountDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderProductDiscountDo) Order(conds ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderProductDiscountDo) Distinct(cols ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderProductDiscountDo) Omit(cols ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderProductDiscountDo) Join(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderProductDiscountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderProductDiscountDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderProductDiscountDo) Group(cols ...field.Expr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderProductDiscountDo) Having(conds ...gen.Condition) IOrderProductDiscountDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderProductDiscountDo) Limit(limit int) IOrderProductDiscountDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderProductDiscountDo) Offset(offset int) IOrderProductDiscountDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderProductDiscountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductDiscountDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderProductDiscountDo) Unscoped() IOrderProductDiscountDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderProductDiscountDo) Create(values ...*models.OrderProductDiscount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderProductDiscountDo) CreateInBatches(values []*models.OrderProductDiscount, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderProductDiscountDo) Save(values ...*models.OrderProductDiscount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderProductDiscountDo) First() (*models.OrderProductDiscount, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductDiscount), nil
	}
}

func (o orderProductDiscountDo) Take() (*models.OrderProductDiscount, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductDiscount), nil
	}
}

func (o orderProductDiscountDo) Last() (*models.OrderProductDiscount, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductDiscount), nil
	}
}

func (o orderProductDiscountDo) Find() ([]*models.OrderProductDiscount, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderProductDiscount), err
}

func (o orderProductDiscountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderProductDiscount, err error) {
	buf := make([]*models.OrderProductDiscount, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderProductDiscountDo) FindInBatches(result *[]*models.OrderProductDiscount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderProductDiscountDo) Attrs(attrs ...field.AssignExpr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderProductDiscountDo) Assign(attrs ...field.AssignExpr) IOrderProductDiscountDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderProductDiscountDo) Joins(fields ...field.RelationField) IOrderProductDiscountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderProductDiscountDo) Preload(fields ...field.RelationField) IOrderProductDiscountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderProductDiscountDo) FirstOrInit() (*models.OrderProductDiscount, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductDiscount), nil
	}
}

func (o orderProductDiscountDo) FirstOrCreate() (*models.OrderProductDiscount, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderProductDiscount), nil
	}
}

func (o orderProductDiscountDo) FindByPage(offset int, limit int) (result []*models.OrderProductDiscount, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderProductDiscountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderProductDiscountDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderProductDiscountDo) Delete(models ...*models.OrderProductDiscount) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderProductDiscountDo) withDO(do gen.Dao) *orderProductDiscountDo {
	o.DO = *do.(*gen.DO)
	return o
}
