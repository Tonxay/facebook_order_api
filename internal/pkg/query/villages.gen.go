// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-api/internal/pkg/models"
)

func newVillage(db *gorm.DB, opts ...gen.DOOption) village {
	_village := village{}

	_village.villageDo.UseDB(db, opts...)
	_village.villageDo.UseModel(&models.Village{})

	tableName := _village.villageDo.TableName()
	_village.ALL = field.NewAsterisk(tableName)
	_village.ID = field.NewInt32(tableName, "id")
	_village.DistrictID = field.NewInt32(tableName, "district_id")
	_village.VillName = field.NewString(tableName, "vill_name")
	_village.VillNameEn = field.NewString(tableName, "vill_name_en")

	_village.fillFieldMap()

	return _village
}

type village struct {
	villageDo

	ALL        field.Asterisk
	ID         field.Int32
	DistrictID field.Int32
	VillName   field.String
	VillNameEn field.String

	fieldMap map[string]field.Expr
}

func (v village) Table(newTableName string) *village {
	v.villageDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v village) As(alias string) *village {
	v.villageDo.DO = *(v.villageDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *village) updateTableName(table string) *village {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.DistrictID = field.NewInt32(table, "district_id")
	v.VillName = field.NewString(table, "vill_name")
	v.VillNameEn = field.NewString(table, "vill_name_en")

	v.fillFieldMap()

	return v
}

func (v *village) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *village) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["district_id"] = v.DistrictID
	v.fieldMap["vill_name"] = v.VillName
	v.fieldMap["vill_name_en"] = v.VillNameEn
}

func (v village) clone(db *gorm.DB) village {
	v.villageDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v village) replaceDB(db *gorm.DB) village {
	v.villageDo.ReplaceDB(db)
	return v
}

type villageDo struct{ gen.DO }

type IVillageDo interface {
	gen.SubQuery
	Debug() IVillageDo
	WithContext(ctx context.Context) IVillageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVillageDo
	WriteDB() IVillageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVillageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVillageDo
	Not(conds ...gen.Condition) IVillageDo
	Or(conds ...gen.Condition) IVillageDo
	Select(conds ...field.Expr) IVillageDo
	Where(conds ...gen.Condition) IVillageDo
	Order(conds ...field.Expr) IVillageDo
	Distinct(cols ...field.Expr) IVillageDo
	Omit(cols ...field.Expr) IVillageDo
	Join(table schema.Tabler, on ...field.Expr) IVillageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVillageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVillageDo
	Group(cols ...field.Expr) IVillageDo
	Having(conds ...gen.Condition) IVillageDo
	Limit(limit int) IVillageDo
	Offset(offset int) IVillageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVillageDo
	Unscoped() IVillageDo
	Create(values ...*models.Village) error
	CreateInBatches(values []*models.Village, batchSize int) error
	Save(values ...*models.Village) error
	First() (*models.Village, error)
	Take() (*models.Village, error)
	Last() (*models.Village, error)
	Find() ([]*models.Village, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Village, err error)
	FindInBatches(result *[]*models.Village, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Village) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVillageDo
	Assign(attrs ...field.AssignExpr) IVillageDo
	Joins(fields ...field.RelationField) IVillageDo
	Preload(fields ...field.RelationField) IVillageDo
	FirstOrInit() (*models.Village, error)
	FirstOrCreate() (*models.Village, error)
	FindByPage(offset int, limit int) (result []*models.Village, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVillageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v villageDo) Debug() IVillageDo {
	return v.withDO(v.DO.Debug())
}

func (v villageDo) WithContext(ctx context.Context) IVillageDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v villageDo) ReadDB() IVillageDo {
	return v.Clauses(dbresolver.Read)
}

func (v villageDo) WriteDB() IVillageDo {
	return v.Clauses(dbresolver.Write)
}

func (v villageDo) Session(config *gorm.Session) IVillageDo {
	return v.withDO(v.DO.Session(config))
}

func (v villageDo) Clauses(conds ...clause.Expression) IVillageDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v villageDo) Returning(value interface{}, columns ...string) IVillageDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v villageDo) Not(conds ...gen.Condition) IVillageDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v villageDo) Or(conds ...gen.Condition) IVillageDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v villageDo) Select(conds ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v villageDo) Where(conds ...gen.Condition) IVillageDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v villageDo) Order(conds ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v villageDo) Distinct(cols ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v villageDo) Omit(cols ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v villageDo) Join(table schema.Tabler, on ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v villageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVillageDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v villageDo) RightJoin(table schema.Tabler, on ...field.Expr) IVillageDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v villageDo) Group(cols ...field.Expr) IVillageDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v villageDo) Having(conds ...gen.Condition) IVillageDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v villageDo) Limit(limit int) IVillageDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v villageDo) Offset(offset int) IVillageDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v villageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVillageDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v villageDo) Unscoped() IVillageDo {
	return v.withDO(v.DO.Unscoped())
}

func (v villageDo) Create(values ...*models.Village) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v villageDo) CreateInBatches(values []*models.Village, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v villageDo) Save(values ...*models.Village) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v villageDo) First() (*models.Village, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Village), nil
	}
}

func (v villageDo) Take() (*models.Village, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Village), nil
	}
}

func (v villageDo) Last() (*models.Village, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Village), nil
	}
}

func (v villageDo) Find() ([]*models.Village, error) {
	result, err := v.DO.Find()
	return result.([]*models.Village), err
}

func (v villageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Village, err error) {
	buf := make([]*models.Village, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v villageDo) FindInBatches(result *[]*models.Village, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v villageDo) Attrs(attrs ...field.AssignExpr) IVillageDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v villageDo) Assign(attrs ...field.AssignExpr) IVillageDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v villageDo) Joins(fields ...field.RelationField) IVillageDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v villageDo) Preload(fields ...field.RelationField) IVillageDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v villageDo) FirstOrInit() (*models.Village, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Village), nil
	}
}

func (v villageDo) FirstOrCreate() (*models.Village, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Village), nil
	}
}

func (v villageDo) FindByPage(offset int, limit int) (result []*models.Village, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v villageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v villageDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v villageDo) Delete(models ...*models.Village) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *villageDo) withDO(do gen.Dao) *villageDo {
	v.DO = *do.(*gen.DO)
	return v
}
